# Snake game Python

import math
import random
import pygame
import tkinter as tk
from tkinter import messagebox


class cube(object):
    rows = 20
    w = 500

    def __init__(self, start, dirnx=1, dirny=0, color=(255, 0, 0)):
        self.pos = start
        self.dirnx = 1
        self.dirny = 0
        self.color = color

    def move(self, dirnx, dirny):
        self.dirnx = dirnx
        self.dirny = dirny
        self.pos = (self.pos[0] + self.dirnx, self.pos[1] + self.dirny) # change the position

    def draw(self, surface, eyes=False):
        dis = self.w // self.rows # width/heigth of each cube
        i = self.pos[0] # current row
        j = self.pos[1] # current coulmn

        pygame.draw.rect(surface, self.color, (i * dis + 1, j * dis + 1, dis - 2, dis - 2))
        # mulitplying the row and coulmn value of the cube bu the width and height
        # of each cube will determine where to draw it
        if eyes: #draws the eyes
            centre = dis // 2
            radius = 3
            circleMiddle = (i * dis + centre - radius, j * dis + 8)
            circleMiddle2 = (i * dis + dis - radius * 2, j * dis + 8)
            pygame.draw.circle(surface, (0, 0, 0), circleMiddle, radius)
            pygame.draw.circle(surface, (0, 0, 0), circleMiddle2, radius)


class snake(object):
    body = []
    turns = {}

    def __init__(self, color, pos):
        self.color = color
        self.head = cube(pos) # the head will be the front of the snake
        self.body.append(self.head) #add head
        self.dirnx = 0
        self.dirny = 1

    def move(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT: # check if user hit the red x
                pygame.quit()

            keys = pygame.key.get_pressed() # see which keys are being pressed

            for key in keys: # loop through all the keys
                if keys[pygame.K_LEFT]:
                    self.dirnx = -1
                    self.dirny = 0
                    self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

                elif keys[pygame.K_RIGHT]:
                    self.dirnx = 1
                    self.dirny = 0
                    self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

                elif keys[pygame.K_UP]:
                    self.dirnx = 0
                    self.dirny = -1
                    self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

                elif keys[pygame.K_DOWN]:
                    self.dirnx = 0
                    self.dirny = 1
                    self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]

        for i, c in enumerate(self.body): #Loop through every cube in body
            p = c.pos[:] # this stores the cubes positions on the grid
            if p in self.turns: # If the cubes current position is one where we turned
                turn = self.turns[p] # get the direction we should turn
                c.move(turn[0], turn[1]) # move our cube in that direction
                if i == len(self.body) - 1: # if this is the last cube in the body remove the turn from dict
                    self.turns.pop(p)
            else: # if we are not turning the cube
                # if the cube reaches the edge of the screen it will appear on the opposite side
                if c.dirnx == -1 and c.pos[0] <= 0:
                    c.pos = (c.rows - 1, c.pos[1])
                elif c.dirnx == 1 and c.pos[0] >= c.rows - 1:
                    c.pos = (0, c.pos[1])
                elif c.dirny == 1 and c.pos[1] >= c.rows - 1:
                    c.pos = (c.pos[0], 0)
                elif c.dirny == -1 and c.pos[1] <= 0:
                    c.pos = (c.pos[0], c.rows - 1)
                else:
                    c.move(c.dirnx, c.dirny) # if havent reached the edge just move in current direction

    def reset(self, pos):
        self.head = cube(pos)
        self.body = []
        self.body.append(self.head)
        self.turns = {}
        self.dirnx = 0
        self.dirny = 1

    def addCube(self):
        tail = self.body[-1]
        dx, dy = tail.dirnx, tail.dirny

        if dx == 1 and dy == 0:
            self.body.append(cube((tail.pos[0] - 1, tail.pos[1])))
        elif dx == -1 and dy == 0:
            self.body.append(cube((tail.pos[0] + 1, tail.pos[1])))
        elif dx == 0 and dy == 1:
            self.body.append(cube((tail.pos[0], tail.pos[1] - 1)))
        elif dx == 0 and dy == -1:
            self.body.append(cube((tail.pos[0], tail.pos[1] + 1)))

        self.body[-1].dirnx = dx
        self.body[-1].dirny = dy

    def draw(self, surface):
        for i, c in enumerate(self.body):
            if i == 0: # for the first cube in the list we want eyes
                c.draw(surface, True) # adding TRUE will tell it to draw eyes
            else:
                c.draw(surface) # otherwise it will just draw a cube


def drawGrid(w, rows, surface):
    sizeBtwn = w // rows # gives us the distance between the lines

    x = 0  # Keeps track of the current X
    y = 0  # Keeps track of the current Y
    for l in range(rows): # will draw one vertical and horizontal line on each loop
        x = x + sizeBtwn
        y = y + sizeBtwn

        pygame.draw.line(surface, (255, 255, 255), (x, 0), (x, w))
        pygame.draw.line(surface, (255, 255, 255), (0, y), (w, y))


def redrawWindow(surface):
    global rows, width, s, snack
    surface.fill((0, 0, 0)) # fills the screen with black
    s.draw(surface)
    snack.draw(surface)
    drawGrid(width, rows, surface) # will draw grid lines
    pygame.display.update() #updates the screen


def randomSnack(rows, item):
    positions = item.body # gets all the positions of cubes in snake

    while True: # keep generating random positions until one is valid
        x = random.randrange(rows)
        y = random.randrange(rows)
        if len(list(filter(lambda z: z.pos == (x, y), positions))) > 0:
            # checks to see if position generated is occupied by snake
            continue
        else:
            break

    return (x, y)


def message_box(subject, content):
    root = tk.Tk()
    root.attributes("-topmost", True)
    root.withdraw()
    messagebox.showinfo(subject, content)
    try:
        root.destroy()
    except:
        pass


def main():
    global width, rows, s, snack
    width = 500 # width of our screen
    rows = 20 # amount of rows
    win = pygame.display.set_mode((width, width)) #creates our screen object
    s = snake((255, 0, 0), (10, 10)) #creates a snake object will code later
    snack = cube(randomSnack(rows, s), color=(0, 255, 0))
    flag = True

    clock = pygame.time.Clock() # creates a clock object
    # STARTING MAIN LOOP
    while flag:
        pygame.time.delay(50) #delays game so it wont run too quickly
        clock.tick(10) # ensures game runs at 10 fps
        s.move()
        if s.body[0].pos == snack.pos: # checks if the head collides with snack
            s.addCube() #adds new cube to snake
            snack = cube(randomSnack(rows, s), color=(0, 255, 0)) #creates a new snack obj

        for x in range(len(s.body)):
            if s.body[x].pos in list(map(lambda z: z.pos, s.body[x + 1:])):
                print('Score: ', len(s.body))
                message_box('You Lost!', 'Play again...')
                s.reset((10, 10))
                break

        redrawWindow(win) # Will refresh the screen


main()
